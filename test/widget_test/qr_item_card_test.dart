import 'package:flutter/cupertino.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:pop_qr/model/qr_item.dart';
import 'package:pop_qr/provider/qr_items_provider.dart';
import 'package:pop_qr/view/qr_code_library/component/qr_item_card.dart';

// „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItemsNotifier
class TestQrItemsNotifier extends AsyncNotifier<List<QrItem>>
    implements QrItemsNotifier {
  List<QrItem> items = [];
  bool removeItemCalled = false;
  bool updateEmojiCalled = false;
  bool updateTitleCalled = false;
  bool updateUrlCalled = false;
  String? lastRemovedId;
  String? lastUpdatedId;
  String? lastUpdatedEmoji;
  String? lastUpdatedTitle;
  String? lastUpdatedUrl;

  TestQrItemsNotifier(this.items);

  @override
  Future<List<QrItem>> build() async {
    return items;
  }

  @override
  Future<void> addItem({
    required String title,
    required String url,
    required String emoji,
  }) async {}

  @override
  Future<void> removeItem(String id) async {
    removeItemCalled = true;
    lastRemovedId = id;
    items.removeWhere((item) => item.id == id);
    state = AsyncData(List.from(items));
  }

  @override
  Future<void> updateEmoji(String id, String emoji) async {
    updateEmojiCalled = true;
    lastUpdatedId = id;
    lastUpdatedEmoji = emoji;

    final index = items.indexWhere((item) => item.id == id);
    if (index != -1) {
      final item = items[index];
      items[index] = QrItem(
        id: item.id,
        title: item.title,
        url: item.url,
        emoji: emoji,
      );
      state = AsyncData(List.from(items));
    }
  }

  @override
  Future<void> updateTitle(String id, String title) async {
    updateTitleCalled = true;
    lastUpdatedId = id;
    lastUpdatedTitle = title;

    final index = items.indexWhere((item) => item.id == id);
    if (index != -1) {
      final item = items[index];
      items[index] = QrItem(
        id: item.id,
        title: title,
        url: item.url,
        emoji: item.emoji,
      );
      state = AsyncData(List.from(items));
    }
  }

  @override
  Future<void> updateUrl(String id, String url) async {
    updateUrlCalled = true;
    lastUpdatedId = id;
    lastUpdatedUrl = url;

    final index = items.indexWhere((item) => item.id == id);
    if (index != -1) {
      final item = items[index];
      items[index] = QrItem(
        id: item.id,
        title: item.title,
        url: url,
        emoji: item.emoji,
      );
      state = AsyncData(List.from(items));
    }
  }
}

void main() {
  testWidgets('QRItemCard„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // ÊåáÂÆö„Åó„Åü„Çø„Ç§„Éà„É´„Å®ÁµµÊñáÂ≠ó„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    expect(find.text('„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ'), findsOneWidget);
    expect(find.text('üß™'), findsOneWidget);
  });

  testWidgets('QRItemCard„Çí„Çø„ÉÉ„Éó„Åó„Åü„Å®„ÅçQR„Ç≥„Éº„ÉâË©≥Á¥∞„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.byType(QRItemCard));

    // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅåÂÆå‰∫Ü„Åô„Çã„Åæ„ÅßÂçÅÂàÜ„Å™ÊôÇÈñì„ÇíÂæÖ„Å§
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅØ270ms + ËøΩÂä†„ÅÆÂæÖÊ©üÊôÇÈñì
    await tester.pump(const Duration(milliseconds: 50));
    await tester.pump(const Duration(milliseconds: 100));
    await tester.pump(const Duration(milliseconds: 300));
    await tester.pumpAndSettle();

    // „É™„É≥„ÇØ„Ç¢„Ç§„Ç≥„É≥„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„Åß„É¢„Éº„ÉÄ„É´„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÊ§úË®º
    expect(find.byKey(const ValueKey('link')), findsOneWidget);
  });

  testWidgets('QRItemCard„ÇíÈï∑Êäº„Åó„Åô„Çã„Å®„Ç¢„ÇØ„Ç∑„Éß„É≥„Ç∑„Éº„Éà„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„ÉóÔºà„Ç∑„É≥„Éó„É´„Å™„Éó„É≠„Éê„Ç§„ÉÄ„Éº„Çí‰ΩøÁî®Ôºâ
    await tester.pumpWidget(
      ProviderScope(
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // „Ç¢„ÇØ„Ç∑„Éß„É≥„Ç∑„Éº„Éà„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    expect(find.text('„Åì„ÅÆQR„Ç≥„Éº„Éâ„Å´ÂØæ„Åó„Å¶ÂÆüË°å„Åô„ÇãÊìç‰Ωú„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ'), findsOneWidget);
    expect(find.text('„Çø„Ç§„Éà„É´„ÇíÂ§âÊõ¥'), findsOneWidget);
    expect(find.text('URL„ÇíÂ§âÊõ¥'), findsOneWidget);
    expect(find.text('ÁµµÊñáÂ≠ó„ÇíÂ§âÊõ¥'), findsOneWidget);
    expect(find.text('ÂâäÈô§'), findsOneWidget);
    expect(find.text('„Ç≠„É£„É≥„Çª„É´'), findsOneWidget);
  });

  testWidgets('ÂâäÈô§„Ç™„Éó„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åô„Çã„Å®QR„Ç¢„Ç§„ÉÜ„É†„ÅåÂâäÈô§„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØNotifier
    final testNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => testNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // ÂâäÈô§„Ç™„Éó„Ç∑„Éß„É≥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('ÂâäÈô§'));
    await tester.pumpAndSettle();

    // removeItem„ÅåÂëº„Å∞„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(testNotifier.removeItemCalled, isTrue);
    expect(testNotifier.lastRemovedId, equals('test-id'));
  });

  testWidgets('ÁµµÊñáÂ≠óÂ§âÊõ¥„Ç™„Éó„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åô„Çã„Å®ÁµµÊñáÂ≠óÈÅ∏ÊäûÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØNotifier
    final testNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => testNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // ÁµµÊñáÂ≠óÂ§âÊõ¥„Ç™„Éó„Ç∑„Éß„É≥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('ÁµµÊñáÂ≠ó„ÇíÂ§âÊõ¥'));
    await tester.pumpAndSettle();

    // ÁµµÊñáÂ≠óÈÅ∏Êäû„Ç∑„Éº„Éà„ÅÆ„Çø„Ç§„Éà„É´„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(find.text('ÁµµÊñáÂ≠ó„ÇíÈÅ∏Êäû'), findsOneWidget);

    // „Ç´„ÉÜ„Ç¥„É™„Çø„Éñ„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºàÂÆüÈöõ„ÅÆË°®Á§∫„Å´Âêà„Çè„Åõ„Å¶Ôºâ
    expect(find.text('„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº'), findsOneWidget);
    expect(find.text('„Çµ„Éº„Éì„Çπ'), findsOneWidget);
  });

  testWidgets('QRItemCard„ÅÆ„Çø„Ç§„Éà„É´Á∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „É¢„ÉÉ„ÇØ„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÅÆÊ∫ñÂÇô
    final mockNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => mockNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // „Çø„Ç§„Éà„É´Â§âÊõ¥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('„Çø„Ç§„Éà„É´„ÇíÂ§âÊõ¥'));
    await tester.pumpAndSettle();

    // „Çø„Ç§„Éà„É´Á∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    expect(find.text('„Çø„Ç§„Éà„É´„ÇíÂ§âÊõ¥'), findsOneWidget);
    expect(find.byType(CupertinoTextField), findsOneWidget);

    // TextEditingController„ÅÆÂÄ§„ÇíÁ¢∫Ë™ç„Åô„Çã‰ª£„Çè„Çä„Å´„ÄÅ„ÉÄ„Ç§„Ç¢„É≠„Ç∞Ëá™‰Ωì„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(find.byType(CupertinoAlertDialog), findsOneWidget);

    // ‰øùÂ≠ò„Éú„Çø„É≥„Å®„Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(find.text('‰øùÂ≠ò'), findsOneWidget);
    expect(find.text('„Ç≠„É£„É≥„Çª„É´'), findsOneWidget);
  });

  testWidgets('QRItemCard„ÅÆURLÁ∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „É¢„ÉÉ„ÇØ„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÅÆÊ∫ñÂÇô
    final mockNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => mockNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // URLÂ§âÊõ¥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('URL„ÇíÂ§âÊõ¥'));
    await tester.pumpAndSettle();

    // URLÁ∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    expect(find.text('URL„ÇíÂ§âÊõ¥'), findsOneWidget);
    expect(find.byType(CupertinoTextField), findsOneWidget);

    // TextEditingController„ÅÆÂÄ§„ÇíÁ¢∫Ë™ç„Åô„Çã‰ª£„Çè„Çä„Å´„ÄÅ„ÉÄ„Ç§„Ç¢„É≠„Ç∞Ëá™‰Ωì„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(find.byType(CupertinoAlertDialog), findsOneWidget);

    // ‰øùÂ≠ò„Éú„Çø„É≥„Å®„Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(find.text('‰øùÂ≠ò'), findsOneWidget);
    expect(find.text('„Ç≠„É£„É≥„Çª„É´'), findsOneWidget);
  });

  testWidgets('„Çø„Ç§„Éà„É´Á∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„Åß„Çø„Ç§„Éà„É´„ÇíÊõ¥Êñ∞„Åß„Åç„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØNotifier
    final testNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => testNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // „Çø„Ç§„Éà„É´Â§âÊõ¥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('„Çø„Ç§„Éà„É´„ÇíÂ§âÊõ¥'));
    await tester.pumpAndSettle();

    // Êñ∞„Åó„ÅÑ„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ
    await tester.enterText(find.byType(CupertinoTextField).first, 'Êñ∞„Åó„ÅÑ„Çø„Ç§„Éà„É´');
    await tester.pumpAndSettle();

    // ‰øùÂ≠ò„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.widgetWithText(CupertinoDialogAction, '‰øùÂ≠ò'));
    await tester.pumpAndSettle();

    // „Çø„Ç§„Éà„É´„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(testNotifier.updateTitleCalled, isTrue);
    expect(testNotifier.lastUpdatedId, equals('test-id'));
    expect(testNotifier.lastUpdatedTitle, equals('Êñ∞„Åó„ÅÑ„Çø„Ç§„Éà„É´'));
  });

  testWidgets('URLÁ∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅßURL„ÇíÊõ¥Êñ∞„Åß„Åç„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØNotifier
    final testNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => testNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // URLÂ§âÊõ¥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('URL„ÇíÂ§âÊõ¥'));
    await tester.pumpAndSettle();

    // Êñ∞„Åó„ÅÑURL„ÇíÂÖ•ÂäõÔºàTextFieldËá™‰Ωì„ÇíÊ§úÁ¥¢„Åó„Å¶ÂÖ•ÂäõÔºâ
    await tester.enterText(
      find.byType(CupertinoTextField).first,
      'https://example.com/new',
    );
    await tester.pumpAndSettle();

    // ‰øùÂ≠ò„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.widgetWithText(CupertinoDialogAction, '‰øùÂ≠ò'));
    await tester.pumpAndSettle();

    // URL„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(testNotifier.updateUrlCalled, isTrue);
    expect(testNotifier.lastUpdatedId, equals('test-id'));
    expect(testNotifier.lastUpdatedUrl, equals('https://example.com/new'));
  });

  testWidgets('„Çø„Ç§„Éà„É´Á∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„Åß„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØNotifier
    final testNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => testNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // „Çø„Ç§„Éà„É´Â§âÊõ¥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('„Çø„Ç§„Éà„É´„ÇíÂ§âÊõ¥'));
    await tester.pumpAndSettle();

    // Á©∫„ÅÆ„Çø„Ç§„Éà„É´„ÇíÂÖ•ÂäõÔºàTextFieldËá™‰Ωì„ÇíÊ§úÁ¥¢„Åó„Å¶ÂÖ•ÂäõÔºâ
    await tester.enterText(find.byType(CupertinoTextField).first, '');
    await tester.pumpAndSettle();

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(find.text('„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ'), findsOneWidget);
  });

  testWidgets('URLÁ∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„Åß„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', (WidgetTester tester) async {
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆQrItem„Çí‰ΩúÊàê
    final testItem = QrItem(
      id: 'test-id',
      title: '„ÉÜ„Çπ„ÉàQR„Ç≥„Éº„Éâ',
      url: 'https://example.com',
      emoji: 'üß™',
    );

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØNotifier
    final testNotifier = TestQrItemsNotifier([testItem]);

    // „ÉÜ„Çπ„ÉàÁî®„ÅÆProviderScope„Åß„É©„ÉÉ„Éó
    await tester.pumpWidget(
      ProviderScope(
        overrides: [qrItemsProvider.overrideWith(() => testNotifier)],
        child: CupertinoApp(
          home: Center(
            child: SizedBox(
              width: 200,
              height: 200,
              child: QRItemCard(item: testItem),
            ),
          ),
        ),
      ),
    );

    // „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await tester.pumpAndSettle();

    // „Ç´„Éº„Éâ„ÇíÈï∑Êäº„Åó
    await tester.longPress(find.byType(QRItemCard));
    await tester.pumpAndSettle();

    // URLÂ§âÊõ¥„Çí„Çø„ÉÉ„Éó
    await tester.tap(find.text('URL„ÇíÂ§âÊõ¥'));
    await tester.pumpAndSettle();

    // ÁÑ°Âäπ„Å™URL„ÇíÂÖ•ÂäõÔºàTextFieldËá™‰Ωì„ÇíÊ§úÁ¥¢„Åó„Å¶ÂÖ•ÂäõÔºâ
    await tester.enterText(
      find.byType(CupertinoTextField).first,
      'invalid-url',
    );
    await tester.pumpAndSettle();

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(find.text('URL„ÅØhttp://„Åæ„Åü„ÅØhttps://„ÅßÂßã„Åæ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô'), findsOneWidget);
  });
}
